/*
 * Copyright 2013 Chris Banes
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * https://github.com/chrisbanes/gradle-mvn-push
 */

apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'io.codearte.nexus-staging'

def isReleaseBuild() {
    def isRelease = System.env.TRAVIS_PULL_REQUEST == "false"
    System.println("Is release: " + isRelease)
    return isRelease
}

def getReleaseRepositoryUrl() {
    return "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
    return "https://oss.sonatype.org/content/repositories/snapshots/"
}

def getRepositoryUsername() {
    return System.env.NEXUS_USERNAME
}

def getRepositoryPassword() {
    return System.env.NEXUS_PASSWORD
}

def setSigningConfig(Project project) {
    ext.env = System.getenv()
    project.ext.set("signing.keyId", env.SIGNING_KEYID)
    project.ext.set("signing.password", env.SIGNING_PASSWORD)
    project.ext.set("signing.secretKeyRingFile", env.SIGNING_SECRETKEYRINGFILE)
}

def getVersionName() {
    if (!isReleaseBuild()) {
        ext.env = System.getenv()
        ext.buildNumber = env.TRAVIS_BUILD_NUMBER ? env.TRAVIS_BUILD_NUMBER : "local"
        return VERSION_NAME + "-$buildNumber-SNAPSHOT"
    } else {
        return VERSION_NAME.replace("-SNAPSHOT", "")
    }
}

afterEvaluate { project ->
    if(isReleaseBuild()){
        setSigningConfig(project)
    }

    uploadArchives {
        repositories {
            if (!isReleaseBuild()) {
                //to publish locally, simply run ./gradlew uploadArchives
                mavenInstaller {
                    pom.groupId = GROUP
                    pom.artifactId = POM_ARTIFACT_ID
                    pom.version = getVersionName()
                }
            } else {
                mavenDeployer {
                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                    pom.groupId = GROUP
                    pom.artifactId = POM_ARTIFACT_ID
                    pom.version = getVersionName()

                    repository(url: getReleaseRepositoryUrl()) {
                        authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                    }
                    snapshotRepository(url: getSnapshotRepositoryUrl()) {
                        authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                    }

                    pom.project {
                        name POM_NAME
                        packaging POM_PACKAGING
                        description POM_DESCRIPTION
                        url POM_URL

                        scm {
                            url POM_SCM_URL
                            connection POM_SCM_CONNECTION
                            developerConnection POM_SCM_DEV_CONNECTION
                        }

                        licenses {
                            license {
                                name POM_LICENSE_NAME
                                url POM_LICENSE_URL
                                distribution POM_LICENSE_DIST
                            }
                        }

                        developers {
                            developer {
                                id POM_DEVELOPER_ID
                                name POM_DEVELOPER_NAME
                            }
                        }
                    }
                }
            }
        }
    }

    signing {
        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    task androidJavadocs(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
    }

    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
        classifier = 'javadoc'
        from androidJavadocs.destinationDir
    }

    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.sourceFiles
    }

    artifacts {
        archives androidSourcesJar
        archives androidJavadocsJar
    }
}
//automatic closing of staging repositories
nexusStaging {
    packageGroup = GROUP
    delayBetweenRetriesInMillis = 10000
    numberOfRetries = 6
}